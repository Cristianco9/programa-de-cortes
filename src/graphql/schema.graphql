type Query {
  # Users
  user(dto: UserDto!): User
  allUsers: [User!]!

  # Orders
  order(dto: OrderDto!): Order
  allOrders: [Order!]!
}

type Mutation {
  # Auth
  login(dto: UserLoginDto!): AuthResponse

  # Users
  newUser(dto: CreateUserDto!): User
  deleteUser(dto: DeleteUserDto!): User
  updateUser(id: ID!, dto: UpdateUserDto!): User

  # Orders
  newOrder(dto: CreateOrderDto!): Order
  deleteOrder(dto: DeleteOrderDto!): Order
  updateOrder(id: ID!, dto: UpdateOrderDto!): Order
}

type User {
  id: UserIdType!
  dateCreation: DateTime
  email: UserEmailType
  rol: UserRolType
  name: UserNameType
  password: UserPasswordType
  orders: [OrderIdType]
}

type Order {
  id: OrderIdType!
  userOwnerID: UserIdType!
  dateCreation: DateTime
  status: OrderStatusType
  anjeoLightID: [Int]
  anejoHeavyID: [Int]
}

type AuthResponse {
  token: JWT
}

# user DTOs
input UserLoginDto {
  userName: UserNameType!
  password: UserPasswordType!
}

input UserDto {
  id: UserIdType!
}

input CreateUserDto {
  email: UserEmailType!
  rol: UserRolType!
  name: UserNameType!
  password: UserPasswordType!
}

input DeleteUserDto {
  id: UserIdType!
}

input UpdateUserDto {
  email: UserEmailType
  rol: UserRolType
  name: UserNameType
  password: UserPasswordType
}

# order DTOs
input OrderDto {
  id: OrderIdType!
}

input CreateOrderDto {
  id: OrderIdType!
  userOwnerID: UserIdType!
}

input DeleteOrderDto {
  id: OrderIdType!
}

input UpdateOrderDto {
  userOwnerID: UserIdType
  status: OrderStatusType
}

# user scalar Types
scalar UserIdType
scalar UserEmailType
scalar UserRolType
scalar UserNameType
scalar UserPasswordType

# order scalar Types
scalar OrderIdType
scalar OrderStatusType
